#!/usr/bin/env bash
# Rust新規プロジェクトをDockerで生成し、最強のテンプレート一式を自動展開
# - cargo new（Docker上で）/ multi-arch build push / リッチlint / .gitignore .gitattributes

set -euo pipefail

DOCKERHUB_USER="${DOCKERHUB_USER:-tororomeshi}"

if [ $# -ne 1 ]; then
  echo "Usage: $0 <project-name>" >&2
  exit 1
fi

PROJECT_NAME="$1"
PROJECT_DIR="$(pwd)/$PROJECT_NAME"

if [ -e "$PROJECT_DIR" ]; then
  echo "Error: directory '$PROJECT_DIR' already exists." >&2
  exit 1
fi

USER_ID=$(id -u)
GROUP_ID=$(id -g)

# Rustプロジェクト新規作成（Docker上）
docker run --rm -u "$USER_ID:$GROUP_ID" \
  -v "$PWD":/app -w /app rust:1.88 \
  cargo new "$PROJECT_NAME" --vcs none

cat > "$PROJECT_DIR/push_to_ecr.sh" <<'EOS'
#!/usr/bin/env bash
set -euo pipefail

AWS_REGION="${AWS_REGION:-ap-northeast-1}"
AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
PROJECT_NAME="${PROJECT_NAME:-$(basename $(pwd))}"
IMAGE_TAG=$(date +%Y%m%d%H%M)
if [ $# -ge 1 ]; then IMAGE_TAG="$1"; fi

REPO_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}"

echo "==> Logging in to Amazon ECR..."
aws ecr get-login-password --region "$AWS_REGION" | \
  docker login --username AWS --password-stdin "$REPO_URI"

echo "==> Checking ECR repository exists (Terraform should manage it)..."
if ! aws ecr describe-repositories --repository-names "${PROJECT_NAME}" --region "$AWS_REGION" >/dev/null 2>&1; then
  echo "❌ ECR repository ${PROJECT_NAME} does not exist. Please create it via Terraform."
  exit 1
fi

echo "==> Building and pushing image to ECR: ${REPO_URI}:${IMAGE_TAG}"
docker buildx create --use --name multiarch-ecr-builder >/dev/null 2>&1 || true

docker buildx build \
  --platform linux/amd64,linux/arm64 \
  --tag "${REPO_URI}:${IMAGE_TAG}" \
  --push \
  .

echo "✅ Multi-arch image pushed to: ${REPO_URI}:${IMAGE_TAG}"
EOS

chmod +x "$PROJECT_DIR/push_to_ecr.sh"

# lint.sh
cat > "$PROJECT_DIR/lint.sh" <<EOS
#!/usr/bin/env bash
set -euo pipefail

LINT_IMAGE=rust-lint-extended
APP_IMAGE="lint-temp-${PROJECT_NAME}"


docker build -t "\$LINT_IMAGE" - <<'DOCKERFILE'
FROM rust:1.88

RUN rustup component add rustfmt clippy && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        pkg-config libssl-dev libwebp-dev \
        git curl && \
    cargo install cargo-outdated cargo-deny cargo-audit && \
    rm -rf /var/lib/apt/lists/*
DOCKERFILE

docker run --rm \
  -v "\$PWD":/usr/src/app \
  -w /usr/src/app \
  "\$LINT_IMAGE" bash -c "
    cargo fmt --all &&
    cargo check &&
    cargo clippy -- -D warnings &&
    cargo outdated || true &&
    cargo deny check || true &&
    cargo audit || true
  "

docker build -t "\${APP_IMAGE}:lint-temp" .

docker run --rm \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -v "\${HOME}/.cache/trivy":/root/.cache/trivy \
  aquasec/trivy:latest image \
    --exit-code 1 \
    --severity CRITICAL,HIGH \
    "\${APP_IMAGE}:lint-temp"

docker rmi "\${APP_IMAGE}:lint-temp" || true

echo "✅ Lint, dependency, and security checks completed!"
EOS

chmod +x "$PROJECT_DIR/lint.sh"

# .gitignore
cat > "$PROJECT_DIR/.gitignore" <<'EOS'
# Generated by Cargo
**/target/
**/debug/

# rustfmt のバックアップファイル
**/*.rs.bk

# MSVC Windows builds が出力するデバッグ情報
*.pdb

# IDE / エディタ
.idea/
.vscode/

# macOS
.DS_Store

# Windows
Thumbs.db

# エディタの一時ファイル
*~
.env.secret
.env
EOS

# .env
cat > .env.example <<'EOS'
# AWS 認証情報（開発用）
AWS_ACCESS_KEY_ID=AKIAxxxxxxxxxxxxxxxx
AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
AWS_DEFAULT_REGION=ap-northeast-1
EOS

# aws-cli
cat > aws.sh <<'EOS'
#!/bin/bash
# aws.sh
set -e

if [ -f .env ]; then
  export $(grep -v '^#' .env | xargs)
else
  echo "❌ .env ファイルがありません。"
  exit 1
fi

# echo "🔐 Verifying AWS credentials..."
# docker run --rm -i \
#   -e AWS_ACCESS_KEY_ID \
#   -e AWS_SECRET_ACCESS_KEY \
#   -e AWS_DEFAULT_REGION \
#   amazon/aws-cli sts get-caller-identity

# 実際のコマンドを実行
echo "🚀 Running: aws $@"
docker run --rm -i \
  -e AWS_ACCESS_KEY_ID \
  -e AWS_SECRET_ACCESS_KEY \
  -e AWS_DEFAULT_REGION \
  amazon/aws-cli "$@"

# # AWS CLI
# ./aws.sh sts get-caller-identity
EOS

chmod +x aws.sh

# terraform
cat > "tf.sh" <<'EOS'
#!/bin/bash
set -e

# .env 読み込み
if [ -f .env ]; then
  export $(grep -v '^#' .env | xargs)
else
  echo "❌ .env ファイルがありません。"
  exit 1
fi

docker run --rm -it \
  -v "$PWD/terraform":/workspace \
  -w /workspace \
  -e AWS_ACCESS_KEY_ID \
  -e AWS_SECRET_ACCESS_KEY \
  -e AWS_DEFAULT_REGION \
  hashicorp/terraform:latest "$@"

# # Terraform
# ./tf.sh init
# ./tf.sh plan
# ./tf.sh apply
EOS

chmod +x tf.sh

# .gitattributes
cat > "$PROJECT_DIR/.gitattributes" <<'EOS'
# 秘密ファイルやローカル向けスクリプトは配布物から除外
.env export-ignore
.env.secret export-ignore
.env.example export-ignore
aws.sh export-ignore
tf.sh export-ignore
EOS

# Dockerfile
cat > "$PROJECT_DIR/Dockerfile" <<EOS
FROM rust:1.88 AS builder
ENV RUSTFLAGS="-C target-feature=-crt-static -C link-arg=-s -C link-arg=-lm"
RUN apt-get update && apt-get install -y \
    musl-tools \
    musl-dev \
    && rustup target add x86_64-unknown-linux-musl \
    && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY . .
RUN cargo build --release --target x86_64-unknown-linux-musl

FROM public.ecr.aws/lambda/provided:al2
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/dynamodb-manager-backend /var/task/bootstrap
RUN chmod +x /var/task/bootstrap
CMD ["bootstrap"]

EOS

# about.toml
cat > "$PROJECT_DIR/about.toml" <<EOS
name = "$PROJECT_NAME"
description = "Describe your project here"
EOS

# about.hbs
cat > "$PROJECT_DIR/about.hbs" <<EOS
# {{name}}
{{description}}
EOS

# .cargo-deny.toml（セキュリティ・ライセンス・重複チェック用）
cat > "$PROJECT_DIR/.cargo-deny.toml" <<'EOS'
[advisories]
yanked = "warn"
severity-threshold = "high"

[licenses]
allow = [
  "MIT",
  "Apache-2.0",
  "Apache-2.0 OR MIT",
  "MIT OR Apache-2.0",
  "BSD-2-Clause",
  "BSD-3-Clause",
  "ISC",
  "Zlib",
  "Unicode-DFS-2016"
]
unlicensed = "warn"
copyleft = "warn"

[bans]
multiple-versions = "warn"
wildcards = "deny"

[sources]
unknown-registry = "warn"
unknown-git = "warn"
allow-git = []
EOS


cat > best-practices.md <<'EOS'
# 1. TerraformでECR作成
cd terraform
./tf.sh init
./tf.sh plan
./tf.sh apply

# 2. アプリビルドしてECRにPush
cd ../my-lambda
./push_to_ecr.sh
EOS


echo "✅ Rustテンプレート新規プロジェクト作成完了: $PROJECT_NAME"
